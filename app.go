package main

import (
	"Portal-2-Launcher/utils"
	"context"
	"encoding/json"
	"fmt"
	"os"
	"os/exec"
	"strings"
)

type AppState struct {
    FilePath  string `json:"filepath"`
    FirstLoad bool   `json:"firstLoad"`
	SRConfigs map[string]bool `json:"srConfigs"`
}

type App struct {
    ctx context.Context
}

func NewApp() *App {
    return &App{}
}

func (a *App) SaveAutoreset(ticks []int, levelName string) string {
    state, err := a.LoadState()
    if err != nil {
        return err.Error()
    }

    cfgPath := state.FilePath + "/portal2/cfg/autoreset"
    if err := os.MkdirAll(cfgPath, os.ModePerm); err != nil {
        return err.Error()
    }

    warningFilePath := cfgPath + "/warning.txt"
    warningContent := "Hey! You use P2SR launcher, these are files automatically generated by P2SR launcher, we do not recommend you edit these files unless you know what you're doing, we recommend you edit in the launcher because it may overwrite it"

    if err := os.WriteFile(warningFilePath, []byte(warningContent), 0644); err != nil {
        return err.Error()
    }

filePath := cfgPath + "/" + utils.ToKebabCase(levelName) + ".txt"
fileContent := strings.Join(strings.Fields(fmt.Sprint(ticks)), "\n")


trimmedContent := strings.Trim(fileContent, "[]")

if err := os.WriteFile(filePath, []byte(trimmedContent), 0644); err != nil {
    return err.Error()
}

    return "Successful! File saved at " + filePath
}

func (a *App) startup(ctx context.Context) {
    a.ctx = ctx
    if !a.stateFileExists() {
        a.SaveState(&AppState{FirstLoad: true})
    }
}

func (a *App) stateFileExists() bool {
    _, err := os.Stat("appstate.json")
    return !os.IsNotExist(err)
}

func (a *App) LoadState() (*AppState, error) {
    data, err := os.ReadFile("appstate.json")
    if err != nil {
        return &AppState{FirstLoad: true}, nil
    }
    var state AppState
    if err := json.Unmarshal(data, &state); err != nil {
        return nil, err
    }
    return &state, nil
}

func (a *App) SaveState(state *AppState) error {
    jsonData, err := json.Marshal(state)
    if err != nil {
        return err
    }
    return os.WriteFile("appstate.json", jsonData, 0644)
}

func (a *App) SaveFilePath(path string) error {
    state, err := a.LoadState()
    if err != nil {
        return err
    }
    state.FilePath = path
    return a.SaveState(state)
}

func (a *App) SetFirstLoadComplete() error {
    state, err := a.LoadState()
    if err != nil {
        return err
    }
    state.FirstLoad = false
    return a.SaveState(state)
}

func (a *App) CheckSRConfigs(status bool) error {
    state, err := a.LoadState()
    if err != nil {
        return err
    }

    if state.SRConfigs == nil {
        state.SRConfigs = make(map[string]bool)
    }

    state.SRConfigs["enabled"] = status

    return a.SaveState(state)
}

func (a *App) PlayPortal2(override bool, args string) (string, error) {
    state, err := a.LoadState()
    if (err != nil) {
        return "", err
    }
    if state.FilePath == "" {
        return "File path is not set.", nil
    }
    valid, err := utils.HashSar(state.FilePath + `/portal2/sar.dll`)
    if (err != nil) {
        return "", err
    }
    if !valid && !override {
        return "Invalid SAR hash.", nil
    }

    // Split args string into a slice of arguments
    argList := strings.Fields(args)
    cmd := exec.Command(state.FilePath+"/portal2.exe", argList...)
    
    // Log the command and arguments
    fmt.Printf("Running command: %s %v\n", cmd.Path, cmd.Args)

    if err := cmd.Start(); err != nil {
        return "", err
    }
    return "Portal 2 started successfully.", nil
}


func (a *App) IsFirstLoad() (bool, error) {
    state, err := a.LoadState()
    if err != nil {
        return true, err
    }
    return state.FirstLoad, nil
}